<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>集成Google登录</title>
    <link href="/9993.html"/>
    <url>/9993.html</url>
    
    <content type="html"><![CDATA[<h2 id="客户端登录"><a href="#客户端登录" class="headerlink" title="客户端登录"></a>客户端登录</h2><h3 id="1-获取idToken"><a href="#1-获取idToken" class="headerlink" title="1. 获取idToken"></a>1. 获取idToken</h3><pre><code class="hljs rust"># 用到的scope<span class="hljs-symbol">&#x27;https</span>:<span class="hljs-comment">//www.googleapis.com/auth/userinfo.email&#x27;,</span><span class="hljs-symbol">&#x27;https</span>:<span class="hljs-comment">//www.googleapis.com/auth/userinfo.profile&#x27;</span></code></pre><h3 id="2-与服务器验证"><a href="#2-与服务器验证" class="headerlink" title="2. 与服务器验证"></a>2. 与服务器验证</h3><h2 id="网页登录（需后台配置重定向url）"><a href="#网页登录（需后台配置重定向url）" class="headerlink" title="网页登录（需后台配置重定向url）"></a>网页登录（需后台配置重定向url）</h2><p>使用自己的WebView登录，需要使用标准的浏览器UA，否则<code>invalid_client</code></p><p>登录url: </p><pre><code class="hljs xquery">https://accounts.google.com/signin/oauth?client_id=<span class="hljs-variable">$client_id</span>&amp;redirect_uri=<span class="hljs-variable">$redirect_url</span>&amp;scope=https<span class="hljs-meta">%3A</span><span class="hljs-meta">%2F</span><span class="hljs-meta">%2Fwww</span>.googleapis.com<span class="hljs-meta">%2Fauth</span><span class="hljs-meta">%2Fuserinfo</span>.email<span class="hljs-meta">%20https</span><span class="hljs-meta">%3A</span><span class="hljs-meta">%2F</span><span class="hljs-meta">%2Fwww</span>.googleapis.com<span class="hljs-meta">%2Fauth</span><span class="hljs-meta">%2Fuserinfo</span>.profile&amp;state=try_sample_request&amp;include_granted_scopes<span class="hljs-built_in">=true</span>&amp;response_type=token&amp;o2v=<span class="hljs-number">2</span>&amp;<span class="hljs-keyword">as</span>=<span class="hljs-keyword">as</span></code></pre><p>范例url:</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://accounts.google.com/signin/oauth?client_id=<span class="hljs-number">594286495522</span>-<span class="hljs-number">7</span>se<span class="hljs-number">42</span>u<span class="hljs-number">6</span>rshlmg<span class="hljs-number">5</span>g<span class="hljs-number">4</span>nvanp<span class="hljs-number">1</span>tsa<span class="hljs-number">09005</span>oc.apps.googleusercontent.com&amp;redirect_uri=https://example-app.com/oauth/google&amp;scope=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fwww.googleapis.com%<span class="hljs-number">2</span>Fauth%<span class="hljs-number">2</span>Fuserinfo.email%<span class="hljs-number">20</span>https%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fwww.googleapis.com%<span class="hljs-number">2</span>Fauth%<span class="hljs-number">2</span>Fuserinfo.profile&amp;state=try_sample_request&amp;include_granted_scopes=true&amp;response_type=token&amp;o<span class="hljs-number">2</span>v=<span class="hljs-number">2</span>&amp;as=jiBedIuNisz<span class="hljs-number">17</span>yKB-XQAOQ</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>三方登录</tag>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集成Apple登录</title>
    <link href="/64508.html"/>
    <url>/64508.html</url>
    
    <content type="html"><![CDATA[<ul><li>客户端使用idToken（JWT）给到服务器，服务器使用苹果公钥解开JWT</li></ul><p>identityToken参考样例：</p><pre><code class="hljs objectivec"><span class="hljs-comment">// jwt 格式 该token的有效期是10分钟(通过.隔开，第一段header，第二段payload，第三段signature)</span>eyJraWQiOiJBSURPUEsxIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiY29tLnNreW1pbmcuZGV2aWNlbW9uaXRvciIsImV4cCI6MTU2NTY2ODA4NiwiaWF0IjoxNTY1NjY3NDg2LCJzdWIiOiIwMDEyNDcuOTNiM2E3OTlhN2M4NGMwY2I0NmNkMDhmMTAwNzk3ZjIuMDcwNCIsImNfaGFzaCI6Ik9oMmFtOWVNTldWWTNkcTVKbUNsYmciLCJhdXRoX3RpbWUiOjE1NjU2Njc0ODZ9.e-pdwK4iKWErr_Gcpkzo8JNi_MWh7OMnA15FvyOXQxTx0GsXzFT3qE3DmXqAar96nx3EqsHI1Qgquqt2ogyj-lLijK_46ifckdqPjncTEGzVWkNTX8uhY7M867B6aUnmR7u-cf2HsmhXrvgsJLGp2TzCI3oTp-kskBOeCPMyTxzNURuYe8zabBlUy6FDNIPeZwZXZqU0Fr3riv2k1NkGx5MqFdUq3z5mNfmWbIAuU64Z3yKhaqwGd2tey1Xxs4hHa786OeYFF3n7G5h<span class="hljs-number">-4</span>kQ4lf163G6I5BU0etCRSYVKqjq-OL<span class="hljs-number">-8</span>z8dHNqvTJtAYanB3OHNWCHevJFHJ2nWOTT3sbw <span class="hljs-comment">// header 解码</span>&#123;<span class="hljs-string">&quot;kid&quot;</span>:<span class="hljs-string">&quot;AIDOPK1&quot;</span>,<span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;RS256&quot;</span>&#125; 其中kid对应上文说的密钥<span class="hljs-keyword">id</span> <span class="hljs-comment">// claims 解码</span>&#123;<span class="hljs-string">&quot;iss&quot;</span>:<span class="hljs-string">&quot;https://appleid.apple.com&quot;</span>,  <span class="hljs-comment">// 苹果签发的标识</span><span class="hljs-string">&quot;aud&quot;</span>:<span class="hljs-string">&quot;com.skyming.devicemonitor&quot;</span>, <span class="hljs-comment">// 接收者的APP ID</span><span class="hljs-string">&quot;exp&quot;</span>:<span class="hljs-number">1565668086</span>,<span class="hljs-string">&quot;iat&quot;</span>:<span class="hljs-number">1565667486</span>,<span class="hljs-string">&quot;sub&quot;</span>:<span class="hljs-string">&quot;001247.93b3a799a7c84c0cb46cd08f100797f2.0704&quot;</span>, <span class="hljs-comment">//用户的唯一标识</span><span class="hljs-string">&quot;c_hash&quot;</span>:<span class="hljs-string">&quot;Oh2am9eMNWVY3dq5JmClbg&quot;</span>,<span class="hljs-string">&quot;auth_time&quot;</span>:<span class="hljs-number">1565667486</span>&#125;</code></pre><p>其中 iss标识是苹果签发的，aud是接收者的APP ID，该token的有效期是10分钟，sub就是用户的唯一标识</p><pre><code class="hljs awk"><span class="hljs-comment"># 苹果api</span><span class="hljs-comment"># 公钥</span>https:<span class="hljs-regexp">//</span>appleid.apple.com<span class="hljs-regexp">/auth/</span>keys<span class="hljs-comment"># 生成idToken(需要添加浏览器UA, 否则invalid_client)</span>https:<span class="hljs-regexp">//</span>appleid.apple.com<span class="hljs-regexp">/auth/</span>token验证demo参见cert目录</code></pre><p>响应内容：</p><pre><code class="hljs json"># 公钥&#123;    <span class="hljs-attr">&quot;keys&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;kty&quot;</span>: <span class="hljs-string">&quot;RSA&quot;</span>,            <span class="hljs-attr">&quot;kid&quot;</span>: <span class="hljs-string">&quot;86D88Kf&quot;</span>,            <span class="hljs-attr">&quot;use&quot;</span>: <span class="hljs-string">&quot;sig&quot;</span>,            <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;RS256&quot;</span>,            <span class="hljs-attr">&quot;n&quot;</span>: <span class="hljs-string">&quot;iGaLqP6y-SJCCBq5Hv6pGDbG_SQ11MNjH7rWHcCFYz4hGwHC4lcSurTlV8u3avoVNM8jXevG1Iu1SY11qInqUvjJur--hghr1b56OPJu6H1iKulSxGjEIyDP6c5BdE1uwprYyr4IO9th8fOwCPygjLFrh44XEGbDIFeImwvBAGOhmMB2AD1n1KviyNsH0bEB7phQtiLk-ILjv1bORSRl8AK677-1T8isGfHKXGZ_ZGtStDe7Lu0Ihp8zoUt59kx2o9uWpROkzF56ypresiIl4WprClRCjz8x6cPZXU2qNWhu71TQvUFwvIvbkE1oYaJMb0jcOTmBRZA2QuYw-zHLwQ&quot;</span>,            <span class="hljs-attr">&quot;e&quot;</span>: <span class="hljs-string">&quot;AQAB&quot;</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;kty&quot;</span>: <span class="hljs-string">&quot;RSA&quot;</span>,            <span class="hljs-attr">&quot;kid&quot;</span>: <span class="hljs-string">&quot;eXaunmL&quot;</span>,            <span class="hljs-attr">&quot;use&quot;</span>: <span class="hljs-string">&quot;sig&quot;</span>,            <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;RS256&quot;</span>,            <span class="hljs-attr">&quot;n&quot;</span>: <span class="hljs-string">&quot;4dGQ7bQK8LgILOdLsYzfZjkEAoQeVC_aqyc8GC6RX7dq_KvRAQAWPvkam8VQv4GK5T4ogklEKEvj5ISBamdDNq1n52TpxQwI2EqxSk7I9fKPKhRt4F8-2yETlYvye-2s6NeWJim0KBtOVrk0gWvEDgd6WOqJl_yt5WBISvILNyVg1qAAM8JeX6dRPosahRVDjA52G2X-Tip84wqwyRpUlq2ybzcLh3zyhCitBOebiRWDQfG26EH9lTlJhll-p_Dg8vAXxJLIJ4SNLcqgFeZe4OfHLgdzMvxXZJnPp_VgmkcpUdRotazKZumj6dBPcXI_XID4Z4Z3OM1KrZPJNdUhxw&quot;</span>,            <span class="hljs-attr">&quot;e&quot;</span>: <span class="hljs-string">&quot;AQAB&quot;</span>        &#125;    ]&#125;</code></pre><p>服务端从上面的数组中的公钥验证客户端的idToken</p><h1 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h1><h2 id="idToken方式登录（适用于客户端）"><a href="#idToken方式登录（适用于客户端）" class="headerlink" title="idToken方式登录（适用于客户端）"></a>idToken方式登录（适用于客户端）</h2><h3 id="1-创建App-ID，添加Sign-in-with-Apple支持"><a href="#1-创建App-ID，添加Sign-in-with-Apple支持" class="headerlink" title="1. 创建App ID，添加Sign in with Apple支持"></a>1. 创建App ID，添加<code>Sign in with Apple</code>支持</h3><h3 id="2-客户端获取idToken请求服务端"><a href="#2-客户端获取idToken请求服务端" class="headerlink" title="2. 客户端获取idToken请求服务端"></a>2. 客户端获取idToken请求服务端</h3><h3 id="3-服务端获取idToken进行验证（node版本）"><a href="#3-服务端获取idToken进行验证（node版本）" class="headerlink" title="3. 服务端获取idToken进行验证（node版本）"></a>3. 服务端获取idToken进行验证（node版本）</h3><pre><code class="hljs js"><span class="hljs-keyword">const</span> NodeRSA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<span class="hljs-keyword">const</span> app = express()<span class="hljs-comment">/*</span><span class="hljs-comment">alg:string</span><span class="hljs-comment">The encryption algorithm used to encrypt the token.</span><span class="hljs-comment">e: string</span><span class="hljs-comment">The exponent value for the RSA public key.</span><span class="hljs-comment">kid: string</span><span class="hljs-comment">A 10-character identifier key, obtained from your developer account.</span><span class="hljs-comment">kty: string</span><span class="hljs-comment">The key type parameter setting. This must be set to &quot;RSA&quot;.</span><span class="hljs-comment">n: string</span><span class="hljs-comment">The modulus value for the RSA public key.</span><span class="hljs-comment">use: string</span><span class="hljs-comment">* kid，为密钥id标识，签名算法采用的是RS256（RSA 256 + SHA 256），kty常量标识使用RSA签名算法，其公钥参数</span><span class="hljs-comment">*/</span><span class="hljs-comment">// 获取苹果的公钥</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getApplePublicKey</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.request(&#123;        method: <span class="hljs-string">&quot;GET&quot;</span>,        url: <span class="hljs-string">&quot;https://appleid.apple.com/auth/keys&quot;</span>,        headers: &#123;            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>        &#125;    &#125;)    <span class="hljs-keyword">let</span> keyvalues = &#123;&#125;;    <span class="hljs-built_in">console</span>.log(res.data)    <span class="hljs-comment">// 循环验证</span>    res.data.keys.map(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;        <span class="hljs-comment">// parse key</span>        <span class="hljs-keyword">const</span> rsa = <span class="hljs-keyword">new</span> NodeRSA();        rsa.importKey(&#123;            n: Buffer.from(key.n, <span class="hljs-string">&#x27;base64&#x27;</span>),            e: Buffer.from(key.e, <span class="hljs-string">&#x27;base64&#x27;</span>)        &#125;, <span class="hljs-string">&#x27;components-public&#x27;</span>);        <span class="hljs-keyword">const</span> publicKey = rsa.exportKey([<span class="hljs-string">&#x27;public&#x27;</span>]);        <span class="hljs-comment">// cache key</span>        keyvalues[key.kid] = publicKey;        <span class="hljs-comment">// return public key string</span>        <span class="hljs-keyword">return</span> publicKey;    &#125;);    <span class="hljs-keyword">return</span> keyvalues;&#125;;<span class="hljs-comment">// 验证id_token</span><span class="hljs-comment">// id_token:  Identity token</span><span class="hljs-comment">// audience : app bundle id  , 可以不用</span><span class="hljs-comment">// subject : userId , 可以不用</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verifyIdToken</span>(<span class="hljs-params">id_token, audience, subject, callback</span>) </span>&#123;    <span class="hljs-keyword">let</span> body = Buffer.from(id_token.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).toString()    <span class="hljs-keyword">let</span> json = <span class="hljs-built_in">JSON</span>.parse(body)    <span class="hljs-built_in">console</span>.log(json)    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">await</span> getApplePublicKey();    <span class="hljs-keyword">let</span> publicKey = map[json.kid];    jwt.verify(id_token, publicKey, &#123; <span class="hljs-attr">algorithms</span>: <span class="hljs-string">&#x27;RS256&#x27;</span>, <span class="hljs-attr">issuer</span>: <span class="hljs-string">&quot;https://appleid.apple.com&quot;</span>, audience, subject &#125;, <span class="hljs-function">(<span class="hljs-params">err, decode</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-comment">//message: invalid signature  / jwt expired</span>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;JJ: verifyIdToken -&gt; error&quot;</span>, err.name, err.message, err.date);            callback &amp;&amp; callback(err);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decode) &#123;            <span class="hljs-comment">// let decode = &#123;</span>            <span class="hljs-comment">//     iss: &#x27;https://appleid.apple.com&#x27;,</span>            <span class="hljs-comment">//     aud: &#x27;xxxxxxxx&#x27;,   </span>            <span class="hljs-comment">//     exp: 1579171507,</span>            <span class="hljs-comment">//     iat: 1579170907,</span>            <span class="hljs-comment">//     sub: &#x27;xxxxxxxx.xxxx&#x27;,</span>            <span class="hljs-comment">//     c_hash: &#x27;xxxxxxxxxxxx&#x27;,</span>            <span class="hljs-comment">//     email: &#x27;xxxxx@qq.com&#x27;,</span>            <span class="hljs-comment">//     email_verified: &#x27;true&#x27;,</span>            <span class="hljs-comment">//     auth_time: 1579170907</span>            <span class="hljs-comment">// &#125;</span>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;JJ: verifyIdToken -&gt; decode&quot;</span>, decode)            callback &amp;&amp; callback(decode);            <span class="hljs-comment">// sub 就是用户的唯一标识, 服务器可以保存它用来检查用户有没用过apple pay login , 至于用户第一次Login时,服务器就默认开一个member 给用户, 还是见到没login 过就自己再通过app 返回到注册页面再接着注册流程, 最后再pass userId 到server 保存. 这个看公司需求.</span>        &#125;    &#125;);&#125;;app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;  <span class="hljs-comment">// 客户端请求服务器的idToken</span>    <span class="hljs-keyword">let</span> idtoken = <span class="hljs-string">&#x27;eyJraWQiOiJlWGF1bm1MIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiY24ucXVpY2tjbi5hcHAiLCJleHAiOjE1OTQ5NTY5MzAsImlhdCI6MTU5NDk1NjMzMCwic3ViIjoiMDAxNjY1LmIwMWUyMTdmYzEzNDRmMTdhYjM2NTM5NmMxN2Y1ZTFiLjA3NTEiLCJhdF9oYXNoIjoiMldDUUhVQVNQSm56QTJWWTRJczM1QSIsImVtYWlsIjoiaWQ0OW5yczd0Y0Bwcml2YXRlcmVsYXkuYXBwbGVpZC5jb20iLCJlbWFpbF92ZXJpZmllZCI6InRydWUiLCJpc19wcml2YXRlX2VtYWlsIjoidHJ1ZSIsImF1dGhfdGltZSI6MTU5NDk1NjI4Miwibm9uY2Vfc3VwcG9ydGVkIjp0cnVlfQ.KQNURkgdOxdf944lTly2fnvivIdSgeBf97IQkMSzGIa-PolPNHI4L-7jHveEm_qXE4ABRDczSSB_gpW7w4OCbHz7ewbF7C-YPE2siFvmasmHxVRyaRH_HUuRlU8KLXcOs2gLMLL-bXhRJGQUaFm41sGIxsxbY69JbHI_18Qz8S2AOR3F45XaxYjmEwpmT8YD05DILvI6DqCA9hwBT2YsLDq68ZvXLxdYI66EJC7n8dHqWGRQzrU53Z5DNYv_mZFWwwl04p0VgbbxQbhFzEV9BCDFoL7ytVG_NFiyOU1_GO69u-2p3Mt0EvDnlYhXkvZr5wqdpN53AI9GwegbqCieBw&#x27;</span>        <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> verifyIdToken(idtoken, <span class="hljs-string">&#x27;填入bundleId&#x27;</span>, <span class="hljs-literal">null</span>);    res.send(data);&#125;)app.listen(<span class="hljs-number">3000</span>)</code></pre><h3 id="4-响应客户端验证结果，成功即绑定用户信息"><a href="#4-响应客户端验证结果，成功即绑定用户信息" class="headerlink" title="4. 响应客户端验证结果，成功即绑定用户信息"></a>4. 响应客户端验证结果，成功即绑定用户信息</h3><h2 id="authorization-code方式登录（适用于网页端）"><a href="#authorization-code方式登录（适用于网页端）" class="headerlink" title="authorization_code方式登录（适用于网页端）"></a>authorization_code方式登录（适用于网页端）</h2><h3 id="1-创建App-ID"><a href="#1-创建App-ID" class="headerlink" title="1. 创建App ID"></a>1. 创建App ID</h3><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916115055.png" width="500" /><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916115127.png" width="500 "/><h3 id="2-勾选Sign-in-with-Apple功能"><a href="#2-勾选Sign-in-with-Apple功能" class="headerlink" title="2. 勾选Sign in with Apple功能"></a>2. 勾选<code>Sign in with Apple</code>功能</h3><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916115346.png" width="500" /><h3 id="3-创建Services-ID"><a href="#3-创建Services-ID" class="headerlink" title="3. 创建Services ID"></a>3. 创建Services ID</h3><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916115442.png" width="500" /><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916120005.png" width="500"/><p>注意：其中需要填入的<code>Identifier</code>是接下来要使用的<code>client_id</code></p><h3 id="4-配置用于验证数据的域名和回调地址"><a href="#4-配置用于验证数据的域名和回调地址" class="headerlink" title="4. 配置用于验证数据的域名和回调地址"></a>4. 配置用于验证数据的域名和回调地址</h3><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916120227.png" width="500" /><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916120433.png" width="500" /><h3 id="5-获取自己应用的key-id和key-file"><a href="#5-获取自己应用的key-id和key-file" class="headerlink" title="5. 获取自己应用的key_id和key_file"></a>5. 获取自己应用的<code>key_id</code>和<code>key_file</code></h3><img src="https://cdn.jsdelivr.net/gh/nullptrX/assets/images/20200916120636.png" width="500" /><h3 id="6-本地创建client-secret-rb文件"><a href="#6-本地创建client-secret-rb文件" class="headerlink" title="6. 本地创建client_secret.rb文件"></a>6. 本地创建client_secret.rb文件</h3><pre><code class="hljs ruby"><span class="hljs-comment"># ruby版本</span><span class="hljs-comment"># gem install jwt</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;jwt&#x27;</span><span class="hljs-comment"># key_file = &#x27;key.txt&#x27;</span>key_file = <span class="hljs-string">&#x27;AuthKey_54N6776F2C.p8&#x27;</span> <span class="hljs-comment"># apple登录创建的key</span>key_id = <span class="hljs-string">&#x27;填入keyId&#x27;</span> <span class="hljs-comment"># apple登录创建的key的id</span>team_id = <span class="hljs-string">&#x27;填入teamId&#x27;</span>client_id = <span class="hljs-string">&#x27;填入bundleId&#x27;</span> <span class="hljs-comment"># 即app_id</span>ecdsa_key = OpenSSL::PKey::EC.new IO.read key_fileheaders = &#123;  <span class="hljs-string">&#x27;alg&#x27;</span> =&gt; <span class="hljs-string">&#x27;ES256&#x27;</span>,  <span class="hljs-string">&#x27;kid&#x27;</span> =&gt; key_id&#125;claims = &#123;<span class="hljs-string">&#x27;iss&#x27;</span> =&gt; team_id,<span class="hljs-string">&#x27;iat&#x27;</span> =&gt; Time.now.to_i,<span class="hljs-string">&#x27;exp&#x27;</span> =&gt; Time.now.to_i + <span class="hljs-number">86400</span>*<span class="hljs-number">180</span>,<span class="hljs-string">&#x27;aud&#x27;</span> =&gt; <span class="hljs-string">&#x27;https://appleid.apple.com&#x27;</span>,<span class="hljs-string">&#x27;sub&#x27;</span> =&gt; client_id,&#125;token = JWT.encode claims, ecdsa_key, <span class="hljs-string">&#x27;ES256&#x27;</span>, headersputs token</code></pre><p>执行命令，得到client_secret</p><pre><code class="hljs shell">su@Mac ~&gt; ruby client_secret.rb eyJhbGciOiJFUzI1NiIsImtpZCI6IjU0TjY3NzZGMkMifQ.eyJpc3MiOiJSNUY5MzJDNTNEIiwiaWF0IjoxNjAwMjIyNTA1LCJleHAiOjE2MTU3NzQ1MDUsImF1ZCI6Imh0dHBzOi8vYXBwbGVpZC5hcHBsZS5jb20iLCJzdWIiOiJjbi5xdWlja2NuLmFwcCJ9.ujJNrutWSjwkJGYQrzPhywkrdWo93bnT6rOiiPrPJYcnOvHPhuR0H_EoAV7Rj-p1iLg8QFzWPWO4sPJt0V5X6w</code></pre><h3 id="7-网页端通过上面获取的client-secret进行登录"><a href="#7-网页端通过上面获取的client-secret进行登录" class="headerlink" title="7. 网页端通过上面获取的client_secret进行登录"></a>7. 网页端通过上面获取的client_secret进行登录</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>session_start();$client_id = <span class="hljs-string">&#x27;填入client_id&#x27;</span>;<span class="hljs-comment">// 上面获取的client_secret</span>$client_secret = <span class="hljs-string">&#x27;eyJhbGciOiJFUzI1NiIsImtpZCI6IjU0TjY3NzZGMkMifQ.eyJpc3MiOiJSNUY5MzJDNTNEIiwiaWF0IjoxNjAwMjI3NDUwLCJleHAiOjE2MTU3Nzk0NTAsImF1ZCI6Imh0dHBzOi8vYXBwbGVpZC5hcHBsZS5jb20iLCJzdWIiOiJjbi5xdWlja2NuLmFwcCJ9.hdi5m83Z2sPPykjUREw9uNqDwgcjjplHtndUPpGPepNjKpABw_U3TOzvR2KRc3r_GYw_svKR5JEFcJOPcGZflg&#x27;</span>;<span class="hljs-comment">// 填入自己配置的url, 可先用下面地址测试流程</span>$redirect_uri = <span class="hljs-string">&#x27;https://example-app.com/redirect&#x27;</span>;<span class="hljs-comment">///////////////////////////////////////////////////////////////////////</span><span class="hljs-comment">// 处理用户Apple登录成功后的回调</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;  <span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">&#x27;state&#x27;</span>] != $_POST[<span class="hljs-string">&#x27;state&#x27;</span>]) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Authorization server returned an invalid state parameter&#x27;</span>);  &#125;  <span class="hljs-comment">// Token endpoint docs: </span>  <span class="hljs-comment">// https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens</span>  $response = http(<span class="hljs-string">&#x27;https://appleid.apple.com/auth/token&#x27;</span>, [    <span class="hljs-string">&#x27;grant_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;authorization_code&#x27;</span>,    <span class="hljs-string">&#x27;code&#x27;</span> =&gt; $_POST[<span class="hljs-string">&#x27;code&#x27;</span>],    <span class="hljs-string">&#x27;redirect_uri&#x27;</span> =&gt; $redirect_uri,    <span class="hljs-string">&#x27;client_id&#x27;</span> =&gt; $client_id,    <span class="hljs-string">&#x27;client_secret&#x27;</span> =&gt; $client_secret,  ]);  <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($response-&gt;access_token)) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;Error getting an access token:&lt;/p&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>; print_r($response); <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Start Over&lt;/a&gt;&lt;/p&gt;&#x27;</span>;    <span class="hljs-keyword">die</span>();  &#125;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h3&gt;Access Token Response&lt;/h3&gt;&#x27;</span>;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>; print_r($response); <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;  $claims = explode(<span class="hljs-string">&#x27;.&#x27;</span>, $response-&gt;id_token)[<span class="hljs-number">1</span>];  $claims = json_decode(base64_decode($claims));  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h3&gt;Parsed ID Token&lt;/h3&gt;&#x27;</span>;  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;  print_r($claims);  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;  <span class="hljs-keyword">die</span>();&#125;<span class="hljs-comment">///////////////////////////////////////////////////////////////////////</span>$_SESSION[<span class="hljs-string">&#x27;state&#x27;</span>] = bin2hex(random_bytes(<span class="hljs-number">5</span>));$authorize_url = <span class="hljs-string">&#x27;https://appleid.apple.com/auth/authorize&#x27;</span>.<span class="hljs-string">&#x27;?&#x27;</span>.http_build_query([  <span class="hljs-string">&#x27;response_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;code&#x27;</span>,  <span class="hljs-string">&#x27;response_mode&#x27;</span> =&gt; <span class="hljs-string">&#x27;form_post&#x27;</span>,  <span class="hljs-string">&#x27;client_id&#x27;</span> =&gt; $client_id,  <span class="hljs-string">&#x27;redirect_uri&#x27;</span> =&gt; $redirect_uri,  <span class="hljs-string">&#x27;state&#x27;</span> =&gt; $_SESSION[<span class="hljs-string">&#x27;state&#x27;</span>],  <span class="hljs-string">&#x27;scope&#x27;</span> =&gt; <span class="hljs-string">&#x27;name email&#x27;</span>,]);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;&#x27;</span>.$authorize_url.<span class="hljs-string">&#x27;&quot;&gt;Sign In with Apple&lt;/a&gt;&#x27;</span>;</code></pre><h3 id="8-待用户登录后，将会重定向到redirect-uri"><a href="#8-待用户登录后，将会重定向到redirect-uri" class="headerlink" title="8. 待用户登录后，将会重定向到redirect_uri"></a>8. 待用户登录后，将会重定向到<code>redirect_uri</code></h3><p>响应信息如下：</p><pre><code class="hljs apache"><span class="hljs-attribute">Form</span> Data:<span class="hljs-attribute">state</span>: d<span class="hljs-number">4523690</span>c<span class="hljs-number">6</span><span class="hljs-attribute">code</span>: c<span class="hljs-number">4</span>d<span class="hljs-number">37</span>a<span class="hljs-number">0</span>e<span class="hljs-number">3</span>c<span class="hljs-number">21947</span>dca<span class="hljs-number">3668</span>bea<span class="hljs-number">92</span>da<span class="hljs-number">6</span>adb.<span class="hljs-number">0</span>.rrwwv.jk<span class="hljs-number">58</span>r<span class="hljs-number">6</span>H_MbDYRJhmb<span class="hljs-number">6</span>F-UQ</code></pre><h3 id="9-后续尚未验证过"><a href="#9-后续尚未验证过" class="headerlink" title="9. 后续尚未验证过"></a>9. 后续尚未验证过</h3><p>登录url:</p><pre><code class="hljs pf">https://appleid.apple.com/auth/authorize?response_type=code&amp;response_mode=form_post&amp;client_id=<span class="hljs-variable">$client_id</span>&amp;redirect_uri=<span class="hljs-variable">$redirect_url</span>&amp;<span class="hljs-keyword">state</span>=<span class="hljs-variable">$state</span>&amp;scope=name+email</code></pre><p>范例url:</p><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://appleid.apple.com/auth/authorize?response_type=code&amp;response_mode=form_post&amp;client_id=com.example.appsign&amp;redirect_uri=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fexample-app.com%<span class="hljs-number">2</span>Fapi%<span class="hljs-number">2</span>Fapple%<span class="hljs-number">2</span>FoauthNotify&amp;state=<span class="hljs-number">66232</span>e<span class="hljs-number">40</span>d<span class="hljs-number">8</span>&amp;scope=name+email</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>三方登录</tag>
      
      <tag>Apple</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>https知识点</title>
    <link href="/50840.html"/>
    <url>/50840.html</url>
    
    <content type="html"><![CDATA[<p>所谓https即http secure/http over ssl/http over tls，在http基础上增加一层加密。</p><p>流程如下：</p><ol><li>Client Hello（C -&gt; S）</li></ol><ul><li>可选TLS版本</li><li>可选加密套件（对称加密算法，非对称加密算法、hash算法）</li><li>随机数</li></ul><ol start="2"><li>Server Hello （S -&gt; C）</li></ol><ul><li>返回客户端和服务端均支持的TLS版本、算法</li><li>随机数</li></ul><ol start="3"><li>Server Status（S -&gt; C）</li></ol><ul><li>服务器公钥</li><li>服务器公钥签名（hash）（<code>证书签发机构私钥</code>签名<code>服务器公钥</code>后的hash值）</li><li>用于验证公钥签名（hash）的公钥（<code>证书签发机构</code>公钥）</li></ul><ol start="4"><li>客户端加密数据（C -&gt; S）</li></ol><ul><li><p>Client Key Exchange：Pre-master secret（随机数）通过三个随机数生成Master Secret (防止replay attack)</p></li><li><p>Change Cipher Spec：使用加密通信</p></li><li><p>Encrypted Handshake Message：通过客户端加密密钥加密(准备发送Encrypted handshake message前)的握手消息</p></li><li><p>Finished</p></li></ul><ol start="5"><li>服务端加密数据（S -&gt; C）</li></ol><ul><li>Change Cipher Spec：使用加密通信</li><li>Encrypted Handshake Message：通过客户端加密密钥加密(准备发送Encrypted handshake message前)的握手消息</li><li>Finished</li></ul><ol start="6"><li>数据传输</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Protocol</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
